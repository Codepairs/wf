openapi: 3.0.3
info:
  title: WealthFamily
  description: WealthFamily API for OS project
  contact:
    name: Zhilyaev Maxim
    email: tssvett@mail.ru
    url: https://github.com/tssvett
  version: 1.0.0

servers:
  - url: http://localhost:2020

tags:
  - name: Category
    description: Операции со всеми категориями
  - name: CategoryById
    description: Операции с категориями по id
  - name: Expense
    description: Операции со всеми расходами
  - name: ExpenseById
    description: Операции с расходами по id
  - name: Income
    description: Операции со всеми доходами
  - name: IncomeById
    description: Операции с доходами по id
  - name: User
    description: Операции с пользователями
  - name: UserById
    description: Операции с пользователями по id
  - name: Auth
    description: Операции аутентификации




paths:
  /categories/pagination:
    post:
      tags:
        - Category
      summary: Получение всех категорий c пагинацией
      description: Returns categories
      operationId: getCategoriesAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySearchDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryInfoDto'
        '400':
          description: Categories is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories/getByFilter:
    post:
      tags:
        - Category
      summary: Получение всех категорий c фильтром
      description: ATTENTION! Фильтр представляет собой список из условий, соедененных коньюнкицей. !Документация фильтра ниже в shemas!.
      operationId: getCategoriesByFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryInfoDto'
        '400':
          description: Categories is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /categories:
    post:
      tags:
        - Category
      summary: Добавление новой категории на склад
      description: Adds a new category
      operationId: addCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateDto'
      responses:
        '200':
          description: Успешная операция, возвращает UUID созданного объекта
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f

        '400':
          description: Неудачная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /categories/categoryById:
    get:
      tags:
        - CategoryById
      summary: Получение категории по id
      description: Returns a category by id
      operationId: getCategoryById
      parameters:
        - name: id
          in: query
          description: id of category to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryInfoDto'
        '400':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - CategoryById
      summary: Обновление категории на складе по id
      description: Returns a  updated category by id
      operationId: updateCategoryById
      requestBody:
        description: Формирование нового объекта с новыми данными для обновления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateDto'
      parameters:
        - name: id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryInfoDto'
        '400':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - CategoryById
      summary: Удаление категории на складе по id
      operationId: deleteCategoryById
      parameters:
        - name: id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f


        '400':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /category/incomesById:
    get:
      tags:
        - CategoryById
      summary: Получение доходов по категории
      description: Returns an incomes by category
      operationId: getIncomesByCategory
      parameters:
        - name: Id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: Incomes not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /category/expensesById:
    get:
      tags:
        - CategoryById
      summary: Получение расходов по категории
      description: Returns an expenses by category
      operationId: getExpensesByCategory
      parameters:
        - name: Id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: Expenses not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /expenses/getByFilter:
    post:
      tags:
        - Expense
      summary: Получение всех расходов c фильтром
      description: ATTENTION! Фильтр представляет собой список из условий, соедененных коньюнкицей. !Документация фильтра ниже в shemas!.
      operationId: getExpensesByFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: Expenses is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /expenses/pagination:
    post:
      tags:
        - Expense
      summary: Получение всех расходов
      description: Returns expenses
      operationId: getExpensesAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseSearchDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: Expense is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /expenses:
    post:
      tags:
        - Expense
      summary: Добавление нового расхода на склад
      description: Adds a new expense
      operationId: createExpense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCreateDto'
      responses:
        '200':
          description: Успешная операция, возвращает UUID созданного объекта
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f

        '400':
          description: Неудачная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /expenses/expensesById:
    get:
      tags:
        - ExpenseById
      summary: Получение расхода по id
      description: Returns a expense by id
      operationId: getExpenseById
      parameters:
        - name: id
          in: query
          description: id of expense to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ExpenseById
      summary: Обновление расхода на складе по id
      description: Returns a updated expense by id
      operationId: updateExpenseById
      requestBody:
        description: Формирование нового объекта с новыми данными для обновления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseUpdateDto'
      parameters:
        - name: id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ExpenseById
      summary: Удаление расхода на складе по id
      operationId: deleteExpenseById
      parameters:
        - name: id
          in: query
          description: Id of expense to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f


        '400':
          description: Expense not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /incomes/getByFilter:
    post:
      tags:
        - Income
      summary: Получение всех доходов c фильтром
      description: ATTENTION! Фильтр представляет собой список из условий, соедененных коньюнкицей. !Документация фильтра ниже в shemas!.
      operationId: getIncomesByFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: Incomes is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /incomes/pagination:
    post:
      tags:
        - Income
      summary: Получение всех доходов
      description: Returns incomes
      operationId: getIncomesAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeSearchDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: Income is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /incomes:
    post:
      tags:
        - Income
      summary: Добавление нового дохода на склад
      description: Adds a new income
      operationId: createIncome
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeCreateDto'
      responses:
        '200':
          description: Успешная операция, возвращает UUID созданного объекта
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f

        '400':
          description: Неудачная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /incomes/incomesById:
    get:
      tags:
        - IncomeById
      summary: Получение дохода по id
      description: Returns a income by id
      operationId: getIncomeById
      parameters:
        - name: id
          in: query
          description: id of income to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: Income not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - IncomeById
      summary: Обновление дохода на складе по id
      description: Returns a updated income by id
      operationId: updateIncomeById
      requestBody:
        description: Формирование нового объекта с новыми данными для обновления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeUpdateDto'
      parameters:
        - name: id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: Income not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - IncomeById
      summary: Удаление дохода на складе по id
      operationId: deleteIncomeById
      parameters:
        - name: id
          in: query
          description: Id of income to return
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f


        '400':
          description: Income not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/getByFilter:
    post:
      tags:
        - User
      summary: Получение всех пользователей c фильтром
      description: ATTENTION! Фильтр представляет собой список из условий, соедененных коньюнкицей. !Документация фильтра ниже в shemas!.
      operationId: getUsersByFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: Users is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/pagination:
    post:
      tags:
        - User
      summary: Получение всех пользователей
      description: Returns users
      operationId: getUsersAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: Users is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /register:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      description: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '200':
          description: Успешная операция, возвращает UUID созданного объекта. СОХРАНЯЕТ JWT токен в headers
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f

        '400':
          description: Неудачная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      tags:
        - Auth
      summary: Вход в систему с использованием логина и пароля
      description: Login to the system
      operationId: login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Успешная операция, сохраняет в headers JWT токен

        '401':
          description: Неудачная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/usersById:
    get:
      tags:
        - UserById
      summary: Получение пользователя по id
      description: Returns a user by id
      operationId: getUserById
      parameters:
        - name: id
          in: query
          description: id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - UserById
      summary: Обновление пользователя по id
      description: Returns a updated user by id
      operationId: updateUserById
      requestBody:
        description: Формирование нового объекта с новыми данными для обновления
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
      parameters:
        - name: id
          in: query
          description: Id of category to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - UserById
      summary: Удаление пользователя по id
      operationId: deleteUserById
      parameters:
        - name: id
          in: query
          description: Id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 101acf9d-715a-4511-9ac9-2b859788ad7f
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/incomesById:
    get:
      tags:
        - UserById
      summary: Получение доходов пользователя по id
      operationId: getIncomesById
      parameters:
        - name: id
          in: query
          description: Id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/expensesById:
    get:
      tags:
        - UserById
      summary: Получение расходов пользователя по id
      operationId: getExpensesById
      parameters:
        - name: id
          in: query
          description: Id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /users/incomesByIdAndFilter:
    post:
      tags:
        - UserById
      summary: Получение доходов пользователя по id и фильтру
      operationId: getIncomesByIdAndFilter
      parameters:
        - name: id
          in: query
          description: Id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/expensesByIdAndFilter:
    post:
      tags:
        - UserById
      summary: Получение расходов пользователя по id и фильтру
      operationId: getExpensesByIdAndFilter
      parameters:
        - name: id
          in: query
          description: Id of user to return
          required: true
          schema:
            type: string
            example: 101acf9d-715a-4511-9ac9-2b859788ad7f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Filter'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseInfoDto'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CategoryCreateDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Овощи
          description: Название категории, которую мы хотим создать


    CategoryInfoDto:
      required:
        - name
        - id
      type: object
      properties:
        name:
          type: string
          example: Овощи
          description: Название категории, которую мы хотим создать
        id:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f

    CategorySearchDto:
      required:
        - size
        - page
      type: object
      properties:
        size:
          type: string
          example: 100
          default: 100
          description: Количество объектов на одной страничке
        page:
          type: string
          example: 0
          default: 0
          description: Номер страницы

    CategoryUpdateDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Овощи
          description: Название для обновления существующей категории

    ExpenseCreateDto:
      required:
        - comment
        - value
        - categoryId
        - userId
        - getDate
      type: object
      properties:
        comment:
          type: string
          example: Расход на продукты
          description: Комментарий для расхода
        value:
          type: number
          example: 20000
          description: Сумма расхода
        categoryId:
          type: string
          example: 201acf9d-705a-4511-9ac9-2c859788ad7f
          description: Id категории для которой создаем расход
        userId:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f
          description: Id пользователя для которого создаем расход
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41


    ExpenseInfoDto:
      required:
        - id
        - comment
        - value
        - getDate
        - user
        - category
      type: object
      properties:
        id:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f
          description: Id расхода
        comment:
          type: string
          example: Расход на продукты
          description: Комментарий для расхода
        value:
          type: number
          example: 20000
          description: Сумма расхода
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41
        user:
          $ref: '#/components/schemas/UserInfoDto'
        category:
          $ref: '#/components/schemas/CategoryInfoDto'


    ExpenseSearchDto:
      required:
        - size
        - page
      type: object
      properties:
        size:
          type: string
          example: 100
          default: 100
          description: Количество объектов на одной страничке
        page:
          type: string
          example: 0
          default: 0
          description: Номер страницы

    ExpenseUpdateDto:
      required:
        - comment
        - value
        - categoryId
        - userId
        - getDate
      type: object
      properties:
        comment:
          type: string
          example: Расход на продукты
          description: Комментарий для расхода
        value:
          type: number
          example: 20000
          description: Сумма расхода
        categoryId:
          type: string
          example: 201acf9d-705a-4511-9ac9-2c859788ad7f
          description: Id категории для которой создаем расход
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41


    IncomeCreateDto:
      required:
        - comment
        - value
        - categoryId
        - userId
        - getDate
      type: object
      properties:
        comment:
          type: string
          example: Доход с акций
          description: Комментарий для дохода
        value:
          type: number
          example: 20000
          description: Сумма дохода
        categoryId:
          type: string
          example: 201acf9d-705a-4511-9ac9-2c859788ad7f
          description: Id категории для которой создаем доход
        userId:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f
          description: Id пользователя для которого создаем доход
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41


    IncomeInfoDto:
      required:
        - id
        - comment
        - value
        - getDate
        - user
        - category
      type: object
      properties:
        id:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f
          description: Id дохода
        comment:
          type: string
          example: Доход с акций
          description: Комментарий для дохода
        value:
          type: number
          example: 20000
          description: Сумма дохода
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41
        user:
          $ref: '#/components/schemas/UserInfoDto'
        category:
          $ref: '#/components/schemas/CategoryInfoDto'


    IncomeSearchDto:
      required:
        - size
        - page
      type: object
      properties:
        size:
          type: string
          example: 100
          default: 100
          description: Количество объектов на одной страничке
        page:
          type: string
          example: 0
          default: 0
          description: Номер страницы

    IncomeUpdateDto:
      required:
        - comment
        - value
        - categoryId
        - userId
        - getDate
      type: object
      properties:
        comment:
          type: string
          example: Доход с акций
          description: Комментарий для дохода
        value:
          type: number
          example: 20000
          description: Сумма дохода
        categoryId:
          type: string
          example: 201acf9d-705a-4511-9ac9-2c859788ad7f
          description: Id категории для которой создаем доход
        getDate:
          type: string
          format: date
          description: Дата получения, ставится пользователем
          example: 25.03.2024 12:42:41



    UserCreateDto:
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
          example: Nagibator228
          description: Имя пользователя
        email:
          type: string
          example: nagibator228@mail.ru
          description: Email пользователя
        password:
          type: string
          example: qwerty
          description: Пароль пользователя

    UserInfoDto:
      required:
        - id
        - name
        - email
      type: object
      properties:
        id:
          type: string
          example: 301acf9d-705a-4511-9ac9-2b859788ad7f
          description: Id пользователя
        name:
          type: string
          example: Nagibator228
          description: Имя пользователя
        email:
          type: string
          example: nagibator228@mail.ru
          description: Email пользователя

    UserSearchDto:
      required:
        - size
        - page
      type: object
      properties:
        size:
          type: string
          example: 100
          default: 100
          description: Количество объектов на одной страничке
        page:
          type: string
          example: 0
          default: 0
          description: Номер страницы

    UserUpdateDto:
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
          example: Nagibator228
          description: Обновленное имя пользователя
        email:
          type: string
          example: nagibator228@mail.ru
          description: Обновленный email пользователя
        password:
          type: string
          example: qwerty
          description: Обновленный пароль пользователя

    LoginDto:
      required:
        - name
        - password
      type: object
      properties:
        name:
          type: string
          example: Nagibator228
          description: Имя пользователя
        password:
          type: string
          example: qwerty
          description: пароль пользователя

    Filter:
      required:
        - field
        - value
        - operation
      type: object
      properties:
        field:
          type: string
          example: name
          description: Имя поля, по которому фильтруем
        value:
          type: string
          example: tssvettnaya
          description: Значение для поля. Тип - тип поля, то есть может быть почти любым (не обязательно string как тут)
        operation:
          type: string
          example: EQUAL
          description: Операция для фильтра. Список доступных операций - (LIKE или ~), (EQUAL или =), (GREATER_THAN_OR_EQUAL или >=), (LESS_THAN_OR_EQUAL или <=), LESS. Что делает каждая из них думайте сами или душите меня или читайте документацию для criteria builder...

    ErrorResponse:
      required:
        - exception
        - message
        - time
      type: object
      properties:
        exception:
          type: string
          example: Exception
          description: Имя исключения
        message:
          type: string
          example: Error message
          description: Сообщение об ошибке
        time:
          type: string
          example: 25.03.2024 12:42:41
          description: Время ошибки